import React, { useEffect, useState } from 'react';
import { useParams, Link } from 'react-router-dom';
import Layout from '../../components/common/Layout';
import Button from '../../components/common/Button';
import courseImages from '../../data/courseImages';
import { apiClient } from '../../api/apiClient';

// API 응답 타입 정의
interface Course {
  id: number;
  title: string;
  slug: string;
  description: string;
  short_description?: string;
  longDescription?: string;
  imageUrl?: string;
  imageAlt?: string;
  instructor: {
    id: number;
    first_name: string;
    last_name: string;
    email: string;
  };
  category: {
    id: number;
    name: string;
  };
  categories?: string[];
  level?: string;
  thumbnail?: string;
  status: string;
  price: string;
  is_free: boolean;
  prerequisites: string;
  learning_outcomes: string[];
  tags: string[];
  language: string;
  duration_minutes: number;
  duration?: string;
  rating: number;
  rating_count: number;
  ratingCount?: number;
  enrollment_count: number;
  enrolledCount?: number;
  completion_percentage: number;
  created_at: string;
  updated_at: string;
  updatedAt?: string;
  modules: CourseModule[];
}

interface CourseModule {
  id: number;
  title: string;
  description: string;
  order: number;
  is_published: boolean;
  created_at: string;
  updated_at: string;
  chapters: Chapter[];
  total_chapters?: number;
  total_duration?: number;
  duration?: string;
}

interface Chapter {
  id: number;
  title: string;
  description: string;
  content_type: 'video' | 'text' | 'pdf' | 'quiz' | 'assignment';
  type?: string;
  content?: string;
  file?: string;
  video_url?: string;
  duration_minutes: number;
  duration?: string;
  order: number;
  is_published: boolean;
  is_free_preview: boolean;
  isFree?: boolean;
  created_at: string;
  updated_at: string;
}

const CourseDetail: React.FC = () => {
  const { courseId } = useParams<{ courseId: string }>();
  const [course, setCourse] = useState<Course | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [expanded, setExpanded] = useState<number[]>([]);
  const [isEnrolled, setIsEnrolled] = useState(false);

  useEffect(() => {
    const fetchCourseDetail = async () => {
      try {
        setIsLoading(true);
        const response = await apiClient.get(`/api/courses/courses/${courseId}/`);
        setCourse(response.data);
        
        // 수강 여부 확인
        try {
          const enrollmentResponse = await apiClient.get(`/api/courses/enrollments/?course=${courseId}`);
          setIsEnrolled(enrollmentResponse.data.length > 0);
        } catch (enrollmentError) {
          console.log('Not enrolled or error checking enrollment');
          setIsEnrolled(false);
        }
        
      } catch (error) {
        console.error('Error fetching course details', error);
      } finally {
        setIsLoading(false);
      }
    };

    if (courseId) {
      fetchCourseDetail();
    }
  }, [courseId]);

  const handleEnrollment = async () => {
    try {
      await apiClient.post(`/api/courses/courses/${courseId}/enroll/`);
      setIsEnrolled(true);
      alert('수강 신청이 완료되었습니다!');
    } catch (error) {
      console.error('Error enrolling in course', error);
      alert('수강 신청 중 오류가 발생했습니다.');
    }
  };

  const toggleModule = (moduleId: number) => {
    if (expanded.includes(moduleId)) {
      setExpanded(expanded.filter((id) => id !== moduleId));
    } else {
      setExpanded([...expanded, moduleId]);
    }
  };

  // 시간 포맷팅 함수
  const formatDuration = (minutes: number) => {
    const hours = Math.floor(minutes / 60);
    const mins = minutes % 60;
    if (hours > 0) {
      return `${hours}시간 ${mins > 0 ? mins + '분' : ''}`;
    }
    return `${mins}분`;
  };

  // 가격 포맷팅 함수
  const formatPrice = (price: string, isFree: boolean) => {
    if (isFree) return '무료';
    return `₩${parseFloat(price).toLocaleString()}`;
  };


  // 로딩 상태 표시
  if (isLoading || !course) {
    return (
      <Layout>
        <div className="flex justify-center items-center h-64">
          <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-indigo-500"></div>
        </div>
      </Layout>
    );
  }

  // LevelBadge 컴포넌트
  const LevelBadge = ({ level }: { level?: string }) => {
    if (!level) return null;
    
    const levelColors = {
      beginner: 'bg-green-100 text-green-800',
      intermediate: 'bg-yellow-100 text-yellow-800',
      advanced: 'bg-red-100 text-red-800'
    } as const;
    
    return (
      <span className={`inline-block px-2 py-1 rounded text-xs font-medium ${levelColors[level as keyof typeof levelColors] || 'bg-gray-100 text-gray-800'}`}>
        {level}
      </span>
    );
  };

  // ContentTypeIcon 컴포넌트
  const ContentTypeIcon = ({ type }: { type?: string }) => {
    const iconClass = "w-4 h-4 text-gray-500";
    
    switch (type) {
      case 'video':
        return (
          <svg className={iconClass} fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z"></path>
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
        );
      case 'quiz':
        return (
          <svg className={iconClass} fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
        );
      case 'text':
      case 'pdf':
        return (
          <svg className={iconClass} fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"></path>
          </svg>
        );
      case 'assignment':
        return (
          <svg className={iconClass} fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
          </svg>
        );
      default:
        return <svg className={iconClass} fill="currentColor" viewBox="0 0 20 20"><path d="M9 2a1 1 0 000 2h2a1 1 0 100-2H9z"></path></svg>;
    }
  };

  // 별점 표시
  const renderStars = (rating: string | number) => {
    const numRating = typeof rating === 'string' ? parseFloat(rating) : rating;
    return (
      <div className="flex">
        {[1, 2, 3, 4, 5].map((star) => (
          <svg
            key={star}
            className={`w-5 h-5 ${
              numRating >= star
                ? 'text-yellow-400'
                : numRating >= star - 0.5
                ? 'text-yellow-300'
                : 'text-gray-300'
            }`}
            fill="currentColor"
            viewBox="0 0 20 20"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
          </svg>
        ))}
      </div>
    );
  };

  return (
    <Layout>
      <div>
        {/* 상단 헤더 */}
        <div className="bg-gray-100 rounded-lg p-6 mb-8">
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
            {/* 강의 이미지 */}
            <div className="lg:col-span-1">
              <img
                src={course.imageUrl || course.thumbnail || courseImages.python?.placeholder || '/images/default-course.jpg'}
                alt={course.imageAlt || course.title}
                className="w-full rounded-lg shadow-md object-cover h-64"
              />
            </div>
            
            {/* 강의 정보 */}
            <div className="lg:col-span-2">
              <h1 className="text-3xl font-bold mb-2">{course.title}</h1>
              <p className="text-gray-700 mb-4">{course.description}</p>
              
              <div className="flex items-center mb-4">
                {renderStars(course.rating)}
                <span className="ml-2 text-gray-600">
                  {typeof course.rating === 'number' ? course.rating.toFixed(1) : parseFloat(course.rating as string).toFixed(1)} ({course.ratingCount || course.rating_count} 리뷰)
                </span>
              </div>
              
              <div className="flex flex-wrap gap-2 mb-4">
                <div className="flex items-center mr-4">
                  <svg className="w-5 h-5 text-gray-500 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                  </svg>
                  <span className="text-gray-600">{course.duration || `${course.duration_minutes}분`}</span>
                </div>
                
                <div className="flex items-center mr-4">
                  <svg className="w-5 h-5 text-gray-500 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z"></path>
                  </svg>
                  <span className="text-gray-600">{course.enrolledCount || course.enrollment_count} 명 수강 중</span>
                </div>
                
                <div className="flex items-center">
                  <svg className="w-5 h-5 text-gray-500 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                  </svg>
                  <span className="text-gray-600">최근 업데이트: {course.updatedAt || new Date(course.updated_at).toLocaleDateString()}</span>
                </div>
              </div>
              
              <div className="flex flex-wrap gap-2 mb-6">
                <LevelBadge level={course.level} />
                {course.categories?.map((category: string) => (
                  <span
                    key={category}
                    className="inline-block bg-gray-200 text-gray-800 text-xs px-2 py-1 rounded"
                  >
                    {category}
                  </span>
                )) || (
                  <span className="inline-block bg-gray-200 text-gray-800 text-xs px-2 py-1 rounded">
                    {course.category.name}
                  </span>
                )}
              </div>
              
              <div className="flex items-center">
                <img
                  src="https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=40&h=40&fit=crop"
                  alt={`${course.instructor.first_name} ${course.instructor.last_name}`}
                  className="w-10 h-10 rounded-full mr-2"
                />
                <div>
                  <p className="font-medium">강사: {course.instructor.first_name} {course.instructor.last_name}</p>
                  <p className="text-sm text-gray-600">{course.instructor.email}</p>
                </div>
              </div>
              
              <div className="mt-6">
                <Button variant="primary" fullWidth>
                  수강 신청하기
                </Button>
              </div>
            </div>
          </div>
        </div>
        
        {/* 강의 상세 내용 */}
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* 왼쪽: 강의 설명 */}
          <div className="lg:col-span-2">
            <div className="bg-white rounded-lg shadow p-6 mb-8">
              <h2 className="text-xl font-bold mb-4">강의 소개</h2>
              <div className="text-gray-700 space-y-4 whitespace-pre-line">
                {course.longDescription || course.description}
              </div>
            </div>
            
            <div className="bg-white rounded-lg shadow p-6 mb-8">
              <h2 className="text-xl font-bold mb-4">이런 분들께 추천합니다</h2>
              <ul className="list-disc pl-5 text-gray-700 space-y-2">
                <li>프로그래밍을 처음 시작하는 분</li>
                <li>파이썬 기초를 탄탄하게 쌓고 싶은 분</li>
                <li>실습 위주로 학습하고 싶은 분</li>
                <li>데이터 분석, 웹 개발 등 다양한 분야로 나아가기 위한 기반을 다지고 싶은 분</li>
              </ul>
            </div>
            
            <div className="bg-white rounded-lg shadow p-6">
              <h2 className="text-xl font-bold mb-4">학습 목표</h2>
              <ul className="list-disc pl-5 text-gray-700 space-y-2">
                <li>파이썬 기본 문법 이해 및 활용</li>
                <li>자료구조(리스트, 튜플, 딕셔너리, 집합) 활용 능력</li>
                <li>함수 작성 및 모듈 활용 능력</li>
                <li>파일 입출력 처리 방법</li>
                <li>간단한 파이썬 프로그램 작성 능력</li>
              </ul>
            </div>
          </div>
          
          {/* 오른쪽: 강의 커리큘럼 */}
          <div className="lg:col-span-1">
            <div className="bg-white rounded-lg shadow p-6 mb-8 sticky top-4">
              <h2 className="text-xl font-bold mb-4">커리큘럼</h2>
              <p className="text-gray-600 mb-4">총 {course.duration || `${course.duration_minutes}분`} · {course.modules.length}개 모듈 · {course.modules.reduce((acc, module) => acc + module.chapters.length, 0)}개 챕터</p>
              
              <div className="space-y-4">
                {course.modules.map((module) => (
                  <div key={module.id} className="border border-gray-200 rounded">
                    <div
                      className="flex justify-between items-center p-3 cursor-pointer hover:bg-gray-50"
                      onClick={() => toggleModule(module.id)}
                    >
                      <div>
                        <h3 className="font-medium">{module.title}</h3>
                        <p className="text-sm text-gray-600">{module.duration || `${module.chapters.reduce((acc, ch) => acc + ch.duration_minutes, 0)}분`} · {module.chapters.length}개 챕터</p>
                      </div>
                      <svg
                        className={`w-5 h-5 transform ${
                          expanded.includes(module.id) ? 'rotate-180' : ''
                        } transition-transform`}
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 9l-7 7-7-7"></path>
                      </svg>
                    </div>
                    
                    {expanded.includes(module.id) && (
                      <div className="border-t border-gray-200">
                        {module.chapters.map((chapter) => (
                          <div
                            key={chapter.id}
                            className="flex justify-between items-center p-3 hover:bg-gray-50"
                          >
                            <div className="flex items-center">
                              <ContentTypeIcon type={chapter.type || chapter.content_type} />
                              <span className="ml-2">{chapter.title}</span>
                              {(chapter.isFree || chapter.is_free_preview) && (
                                <span className="ml-2 text-xs text-green-600 font-medium">미리보기</span>
                              )}
                            </div>
                            <span className="text-sm text-gray-600">{chapter.duration || `${chapter.duration_minutes}분`}</span>
                          </div>
                        ))}
                      </div>
                    )}
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>
      </div>
    </Layout>
  );
};

export default CourseDetail;