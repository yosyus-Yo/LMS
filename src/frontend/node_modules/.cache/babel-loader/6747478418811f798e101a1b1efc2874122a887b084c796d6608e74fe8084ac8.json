{"ast":null,"code":"import axios from 'axios';\n\n// Backend URL (설정이 다른 환경에 따라 다름)\nconst API_BASE_URL = process.env.NODE_ENV === 'production' ? 'https://api.ai-lms.example.com' // 프로덕션 URL (실제 배포시 변경 필요)\n: 'http://localhost:8000'; // 개발 환경 URL\n\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add a request interceptor to include the auth token in requests if available\napiClient.interceptors.request.use(config => {\n  // 개발 모드 로그\n  if (process.env.NODE_ENV === 'development') {\n    var _config$method, _config$url;\n    console.log(`API Request: ${(_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase()} ${config.url}`, (_config$url = config.url) !== null && _config$url !== void 0 && _config$url.includes('login') ? '로그인 요청 데이터: ' + JSON.stringify(config.data) : '');\n  }\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// Add a response interceptor to handle common error scenarios\napiClient.interceptors.response.use(response => {\n  // 개발 모드 로그\n  if (process.env.NODE_ENV === 'development') {\n    var _response$config$meth;\n    console.log(`API Response: ${(_response$config$meth = response.config.method) === null || _response$config$meth === void 0 ? void 0 : _response$config$meth.toUpperCase()} ${response.config.url}`, response.status);\n  }\n  return response;\n}, error => {\n  // 개발 모드에서는 모든 네트워크 오류를 로그\n  if (process.env.NODE_ENV === 'development') {\n    if (error.response) {\n      // 서버에서 응답이 왔지만 오류 상태 코드\n      console.log('API Error Response:', {\n        status: error.response.status,\n        data: error.response.data,\n        url: error.config.url,\n        method: error.config.method\n      });\n    } else if (error.request) {\n      // 요청은 보냈지만 응답을 받지 못함 (네트워크 오류 등)\n      console.log('API Network Error:', {\n        url: error.config.url,\n        method: error.config.method\n      });\n    } else {\n      // 요청 설정 중 오류 발생\n      console.log('API Config Error:', error.message);\n    }\n  }\n\n  // 401 Unauthorized 처리\n  if (error.response && error.response.status === 401) {\n    // 토큰이 만료되었거나 유효하지 않음\n    if (error.config.url !== '/api/auth/login/') {\n      // 로그인 엔드포인트가 아닌 경우에만 로그아웃 처리\n      localStorage.removeItem('token');\n      window.location.href = '/login';\n    }\n  }\n  return Promise.reject(error);\n});\nexport default apiClient;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","NODE_ENV","apiClient","create","baseURL","headers","interceptors","request","use","config","_config$method","_config$url","console","log","method","toUpperCase","url","includes","JSON","stringify","data","token","localStorage","getItem","Authorization","error","Promise","reject","response","_response$config$meth","status","message","removeItem","window","location","href"],"sources":["/Users/seohun/Documents/LMS (1)/src/frontend/src/api/apiClient.ts"],"sourcesContent":["import axios from 'axios';\n\n// Backend URL (설정이 다른 환경에 따라 다름)\nconst API_BASE_URL = process.env.NODE_ENV === 'production' \n  ? 'https://api.ai-lms.example.com' // 프로덕션 URL (실제 배포시 변경 필요)\n  : 'http://localhost:8000';         // 개발 환경 URL\n\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add a request interceptor to include the auth token in requests if available\napiClient.interceptors.request.use(\n  (config) => {\n    // 개발 모드 로그\n    if (process.env.NODE_ENV === 'development') {\n      console.log(`API Request: ${config.method?.toUpperCase()} ${config.url}`, \n        config.url?.includes('login') ? '로그인 요청 데이터: ' + JSON.stringify(config.data) : '');\n    }\n    \n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\n// Add a response interceptor to handle common error scenarios\napiClient.interceptors.response.use(\n  (response) => {\n    // 개발 모드 로그\n    if (process.env.NODE_ENV === 'development') {\n      console.log(`API Response: ${response.config.method?.toUpperCase()} ${response.config.url}`, response.status);\n    }\n    return response;\n  },\n  (error) => {\n    // 개발 모드에서는 모든 네트워크 오류를 로그\n    if (process.env.NODE_ENV === 'development') {\n      if (error.response) {\n        // 서버에서 응답이 왔지만 오류 상태 코드\n        console.log('API Error Response:', {\n          status: error.response.status,\n          data: error.response.data,\n          url: error.config.url,\n          method: error.config.method\n        });\n      } else if (error.request) {\n        // 요청은 보냈지만 응답을 받지 못함 (네트워크 오류 등)\n        console.log('API Network Error:', {\n          url: error.config.url, \n          method: error.config.method\n        });\n      } else {\n        // 요청 설정 중 오류 발생\n        console.log('API Config Error:', error.message);\n      }\n    }\n    \n    // 401 Unauthorized 처리\n    if (error.response && error.response.status === 401) {\n      // 토큰이 만료되었거나 유효하지 않음\n      if (error.config.url !== '/api/auth/login/') {\n        // 로그인 엔드포인트가 아닌 경우에만 로그아웃 처리\n        localStorage.removeItem('token');\n        window.location.href = '/login';\n      }\n    }\n    \n    return Promise.reject(error);\n  }\n);\n\nexport default apiClient;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}