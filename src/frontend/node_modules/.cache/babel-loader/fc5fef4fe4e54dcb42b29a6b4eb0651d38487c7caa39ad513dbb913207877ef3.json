{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport apiClient from '../../api/apiClient';\n\n// 타입 정의\n\n// 초기 상태\nconst initialState = {\n  token: localStorage.getItem('token'),\n  user: null,\n  isAuthenticated: localStorage.getItem('token') ? true : false,\n  isLoading: false,\n  error: null\n};\n\n// 로그인 비동기 액션\nexport const login = createAsyncThunk('auth/login', async (credentials, {\n  rejectWithValue\n}) => {\n  try {\n    // 백엔드 API 엔드포인트로 요청\n    const response = await apiClient.post('/api/auth/login/', credentials);\n\n    // 로컬 스토리지에 토큰 저장\n    localStorage.setItem('token', response.data.access);\n    return response.data;\n  } catch (error) {\n    console.error('Login error:', error);\n    if (error.response) {\n      var _error$response$data, _error$response$data2;\n      // 서버 응답 오류 처리\n      return rejectWithValue(((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.detail) || ((_error$response$data2 = error.response.data) === null || _error$response$data2 === void 0 ? void 0 : _error$response$data2.message) || 'Login failed');\n    }\n    return rejectWithValue('Network error occurred. Please check your connection and try again.');\n  }\n});\n\n// 회원가입 비동기 액션\nexport const register = createAsyncThunk('auth/register', async (credentials, {\n  rejectWithValue\n}) => {\n  try {\n    // 개발 중 항상 성공으로 처리 (백엔드 연결 없이 테스트 가능)\n    console.log('Process env check:', {\n      isDev: process.env.NODE_ENV === 'development',\n      useRealApi: process.env.REACT_APP_USE_REAL_API\n    });\n\n    // 항상 개발 모드에서는 가짜 응답 사용하도록 수정 (테스트용)\n    if (process.env.NODE_ENV === 'development') {\n      // 가짜 응답 데이터로 성공 시뮬레이션\n      console.log('Development mode: Simulating successful registration');\n      const mockData = {\n        id: 1,\n        username: credentials.username,\n        email: credentials.email,\n        firstName: credentials.firstName,\n        lastName: credentials.lastName,\n        role: 'student' // 타입스크립트를 위해 명시적으로 리터럴 타입 지정\n      };\n      return mockData;\n    }\n\n    // 실제 백엔드 API 요청 (프로덕션 모드에서만 실행)\n    const response = await apiClient.post('/api/auth/register/', credentials);\n    return response.data;\n  } catch (error) {\n    console.error('Registration error:', error);\n\n    // 오류 세부 정보 로깅\n    if (error.response) {\n      console.log('Error response:', error.response.data);\n    }\n\n    // 개발 모드에서는 오류가 발생해도 성공으로 처리\n    if (process.env.NODE_ENV === 'development') {\n      console.log('Development mode: Ignoring error and returning mock data');\n      const mockData = {\n        id: 1,\n        username: credentials.username,\n        email: credentials.email,\n        firstName: credentials.firstName,\n        lastName: credentials.lastName,\n        role: 'student'\n      };\n      return mockData;\n    }\n    if (error.response) {\n      var _error$response$data3, _error$response$data4;\n      // 서버 응답 오류 더 자세히 처리\n      const errorMessage = ((_error$response$data3 = error.response.data) === null || _error$response$data3 === void 0 ? void 0 : _error$response$data3.detail) || ((_error$response$data4 = error.response.data) === null || _error$response$data4 === void 0 ? void 0 : _error$response$data4.message) || (typeof error.response.data === 'string' ? error.response.data : 'Registration failed');\n      return rejectWithValue(errorMessage);\n    }\n\n    // 네트워크 오류 등 처리\n    return rejectWithValue('Network error occurred. Please check your connection and try again.');\n  }\n});\n\n// 사용자 정보 가져오기 액션\nexport const getUserProfile = createAsyncThunk('auth/getUserProfile', async (_, {\n  getState,\n  rejectWithValue\n}) => {\n  try {\n    const {\n      auth\n    } = getState();\n    if (!auth.token) {\n      return rejectWithValue('No authentication token');\n    }\n\n    // 실제 백엔드 API 요청\n    const response = await apiClient.get('/api/auth/profile/');\n    // 토큰은 apiClient의 인터셉터에서 자동으로 추가됨\n\n    return response.data;\n  } catch (error) {\n    console.error('Profile fetch error:', error);\n    if (error.response) {\n      var _error$response$data5, _error$response$data6;\n      const errorMessage = ((_error$response$data5 = error.response.data) === null || _error$response$data5 === void 0 ? void 0 : _error$response$data5.detail) || ((_error$response$data6 = error.response.data) === null || _error$response$data6 === void 0 ? void 0 : _error$response$data6.message) || 'Failed to fetch user profile';\n      return rejectWithValue(errorMessage);\n    }\n    return rejectWithValue('Network error occurred. Please check your connection and try again.');\n  }\n});\n\n// Auth 슬라이스\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    logout: state => {\n      localStorage.removeItem('token');\n      state.token = null;\n      state.user = null;\n      state.isAuthenticated = false;\n      state.error = null;\n    },\n    clearError: state => {\n      state.error = null;\n    }\n  },\n  extraReducers: builder => {\n    // 로그인 액션 처리\n    builder.addCase(login.pending, state => {\n      state.isLoading = true;\n      state.error = null;\n    }).addCase(login.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isAuthenticated = true;\n      state.token = action.payload.access;\n      state.user = action.payload.user;\n    }).addCase(login.rejected, (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    });\n\n    // 회원가입 액션 처리\n    builder.addCase(register.pending, state => {\n      state.isLoading = true;\n      state.error = null;\n    }).addCase(register.fulfilled, state => {\n      state.isLoading = false;\n    }).addCase(register.rejected, (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    });\n\n    // 사용자 정보 가져오기 액션 처리\n    builder.addCase(getUserProfile.pending, state => {\n      state.isLoading = true;\n      state.error = null;\n    }).addCase(getUserProfile.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.user = action.payload;\n    }).addCase(getUserProfile.rejected, (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n      // 토큰이 만료된 경우 로그아웃 처리\n      if (action.payload === 'Token is invalid or expired') {\n        state.token = null;\n        state.user = null;\n        state.isAuthenticated = false;\n        localStorage.removeItem('token');\n      }\n    });\n  }\n});\nexport const {\n  logout,\n  clearError\n} = authSlice.actions;\nexport default authSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","apiClient","initialState","token","localStorage","getItem","user","isAuthenticated","isLoading","error","login","credentials","rejectWithValue","response","post","setItem","data","access","console","_error$response$data","_error$response$data2","detail","message","register","log","isDev","process","env","NODE_ENV","useRealApi","REACT_APP_USE_REAL_API","mockData","id","username","email","firstName","lastName","role","_error$response$data3","_error$response$data4","errorMessage","getUserProfile","_","getState","auth","get","_error$response$data5","_error$response$data6","authSlice","name","reducers","logout","state","removeItem","clearError","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","actions","reducer"],"sources":["/Users/seohun/Documents/LMS (1)/src/frontend/src/features/auth/authSlice.ts"],"sourcesContent":["import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit';\nimport apiClient from '../../api/apiClient';\nimport { jwtDecode } from 'jwt-decode';\n\n// 타입 정의\ninterface User {\n  id: number;\n  username: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n  role: 'student' | 'instructor' | 'admin';\n}\n\ninterface AuthState {\n  token: string | null;\n  user: User | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  error: string | null;\n}\n\ninterface LoginCredentials {\n  username: string;\n  password: string;\n}\n\ninterface RegisterCredentials {\n  username: string;\n  email: string;\n  password: string;\n  firstName: string;\n  lastName: string;\n}\n\ninterface LoginResponse {\n  access: string;\n  refresh: string;\n  user: User;\n}\n\n// 초기 상태\nconst initialState: AuthState = {\n  token: localStorage.getItem('token'),\n  user: null,\n  isAuthenticated: localStorage.getItem('token') ? true : false,\n  isLoading: false,\n  error: null,\n};\n\n// 로그인 비동기 액션\nexport const login = createAsyncThunk(\n  'auth/login',\n  async (credentials: LoginCredentials, { rejectWithValue }) => {\n    try {\n      // 백엔드 API 엔드포인트로 요청\n      const response = await apiClient.post<LoginResponse>(\n        '/api/auth/login/',\n        credentials\n      );\n      \n      // 로컬 스토리지에 토큰 저장\n      localStorage.setItem('token', response.data.access);\n      \n      return response.data;\n    } catch (error: any) {\n      console.error('Login error:', error);\n      \n      if (error.response) {\n        // 서버 응답 오류 처리\n        return rejectWithValue(error.response.data?.detail || error.response.data?.message || 'Login failed');\n      }\n      return rejectWithValue('Network error occurred. Please check your connection and try again.');\n    }\n  }\n);\n\n// 회원가입 비동기 액션\nexport const register = createAsyncThunk(\n  'auth/register',\n  async (credentials: RegisterCredentials, { rejectWithValue }) => {\n    try {\n      // 개발 중 항상 성공으로 처리 (백엔드 연결 없이 테스트 가능)\n      console.log('Process env check:', {\n        isDev: process.env.NODE_ENV === 'development',\n        useRealApi: process.env.REACT_APP_USE_REAL_API\n      });\n      \n      // 항상 개발 모드에서는 가짜 응답 사용하도록 수정 (테스트용)\n      if (process.env.NODE_ENV === 'development') {\n        // 가짜 응답 데이터로 성공 시뮬레이션\n        console.log('Development mode: Simulating successful registration');\n        const mockData: User = {\n          id: 1,\n          username: credentials.username,\n          email: credentials.email,\n          firstName: credentials.firstName,\n          lastName: credentials.lastName,\n          role: 'student' as const  // 타입스크립트를 위해 명시적으로 리터럴 타입 지정\n        };\n        return mockData;\n      }\n    \n      // 실제 백엔드 API 요청 (프로덕션 모드에서만 실행)\n      const response = await apiClient.post<User>(\n        '/api/auth/register/',\n        credentials\n      );\n      return response.data;\n    } catch (error: any) {\n      console.error('Registration error:', error);\n      \n      // 오류 세부 정보 로깅\n      if (error.response) {\n        console.log('Error response:', error.response.data);\n      }\n      \n      // 개발 모드에서는 오류가 발생해도 성공으로 처리\n      if (process.env.NODE_ENV === 'development') {\n        console.log('Development mode: Ignoring error and returning mock data');\n        const mockData: User = {\n          id: 1,\n          username: credentials.username,\n          email: credentials.email,\n          firstName: credentials.firstName,\n          lastName: credentials.lastName,\n          role: 'student' as const\n        };\n        return mockData;\n      }\n      \n      if (error.response) {\n        // 서버 응답 오류 더 자세히 처리\n        const errorMessage = \n          error.response.data?.detail || \n          error.response.data?.message || \n          (typeof error.response.data === 'string' ? error.response.data : 'Registration failed');\n        return rejectWithValue(errorMessage);\n      }\n      \n      // 네트워크 오류 등 처리\n      return rejectWithValue('Network error occurred. Please check your connection and try again.');\n    }\n  }\n);\n\n// 사용자 정보 가져오기 액션\nexport const getUserProfile = createAsyncThunk(\n  'auth/getUserProfile',\n  async (_, { getState, rejectWithValue }) => {\n    try {\n      const { auth } = getState() as { auth: AuthState };\n      \n      if (!auth.token) {\n        return rejectWithValue('No authentication token');\n      }\n      \n      // 실제 백엔드 API 요청\n      const response = await apiClient.get<User>('/api/auth/profile/');\n      // 토큰은 apiClient의 인터셉터에서 자동으로 추가됨\n      \n      return response.data;\n    } catch (error: any) {\n      console.error('Profile fetch error:', error);\n      \n      if (error.response) {\n        const errorMessage = \n          error.response.data?.detail || \n          error.response.data?.message || \n          'Failed to fetch user profile';\n        return rejectWithValue(errorMessage);\n      }\n      return rejectWithValue('Network error occurred. Please check your connection and try again.');\n    }\n  }\n);\n\n// Auth 슬라이스\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    logout: (state) => {\n      localStorage.removeItem('token');\n      state.token = null;\n      state.user = null;\n      state.isAuthenticated = false;\n      state.error = null;\n    },\n    clearError: (state) => {\n      state.error = null;\n    },\n  },\n  extraReducers: (builder) => {\n    // 로그인 액션 처리\n    builder\n      .addCase(login.pending, (state) => {\n        state.isLoading = true;\n        state.error = null;\n      })\n      .addCase(login.fulfilled, (state, action: PayloadAction<LoginResponse>) => {\n        state.isLoading = false;\n        state.isAuthenticated = true;\n        state.token = action.payload.access;\n        state.user = action.payload.user;\n      })\n      .addCase(login.rejected, (state, action) => {\n        state.isLoading = false;\n        state.error = action.payload as string;\n      });\n    \n    // 회원가입 액션 처리\n    builder\n      .addCase(register.pending, (state) => {\n        state.isLoading = true;\n        state.error = null;\n      })\n      .addCase(register.fulfilled, (state) => {\n        state.isLoading = false;\n      })\n      .addCase(register.rejected, (state, action) => {\n        state.isLoading = false;\n        state.error = action.payload as string;\n      });\n    \n    // 사용자 정보 가져오기 액션 처리\n    builder\n      .addCase(getUserProfile.pending, (state) => {\n        state.isLoading = true;\n        state.error = null;\n      })\n      .addCase(getUserProfile.fulfilled, (state, action: PayloadAction<User>) => {\n        state.isLoading = false;\n        state.user = action.payload;\n      })\n      .addCase(getUserProfile.rejected, (state, action) => {\n        state.isLoading = false;\n        state.error = action.payload as string;\n        // 토큰이 만료된 경우 로그아웃 처리\n        if (action.payload === 'Token is invalid or expired') {\n          state.token = null;\n          state.user = null;\n          state.isAuthenticated = false;\n          localStorage.removeItem('token');\n        }\n      });\n  },\n});\n\nexport const { logout, clearError } = authSlice.actions;\nexport default authSlice.reducer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}