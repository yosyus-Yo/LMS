{"ast":null,"code":"import axios from'axios';// Backend URL (설정이 다른 환경에 따라 다름)\nconst API_BASE_URL=process.env.NODE_ENV==='production'?'https://api.ai-lms.example.com'// 프로덕션 URL (실제 배포시 변경 필요)\n:'http://localhost:8000';// 개발 환경 URL\nconst apiClient=axios.create({baseURL:API_BASE_URL,headers:{'Content-Type':'application/json'}});// Add a request interceptor to include the auth token in requests if available\napiClient.interceptors.request.use(config=>{// 개발 모드 로그\nif(process.env.NODE_ENV==='development'){var _config$method,_config$url;console.log(\"API Request: \".concat((_config$method=config.method)===null||_config$method===void 0?void 0:_config$method.toUpperCase(),\" \").concat(config.url),(_config$url=config.url)!==null&&_config$url!==void 0&&_config$url.includes('login')?'로그인 요청 데이터: '+JSON.stringify(config.data):'');}const token=localStorage.getItem('token');if(token){config.headers.Authorization=\"Bearer \".concat(token);}return config;},error=>Promise.reject(error));// Add a response interceptor to handle common error scenarios\napiClient.interceptors.response.use(response=>{// 개발 모드 로그\nif(process.env.NODE_ENV==='development'){var _response$config$meth;console.log(\"API Response: \".concat((_response$config$meth=response.config.method)===null||_response$config$meth===void 0?void 0:_response$config$meth.toUpperCase(),\" \").concat(response.config.url),response.status);}return response;},error=>{// 개발 모드에서는 모든 네트워크 오류를 로그\nif(process.env.NODE_ENV==='development'){if(error.response){// 서버에서 응답이 왔지만 오류 상태 코드\nconsole.log('API Error Response:',{status:error.response.status,data:error.response.data,url:error.config.url,method:error.config.method});}else if(error.request){// 요청은 보냈지만 응답을 받지 못함 (네트워크 오류 등)\nconsole.log('API Network Error:',{url:error.config.url,method:error.config.method});}else{// 요청 설정 중 오류 발생\nconsole.log('API Config Error:',error.message);}}// 401 Unauthorized 처리\nif(error.response&&error.response.status===401){// 토큰이 만료되었거나 유효하지 않음\nif(error.config.url!=='/api/auth/login/'){// 로그인 엔드포인트가 아닌 경우에만 로그아웃 처리\nlocalStorage.removeItem('token');window.location.href='/login';}}return Promise.reject(error);});export default apiClient;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","NODE_ENV","apiClient","create","baseURL","headers","interceptors","request","use","config","_config$method","_config$url","console","log","concat","method","toUpperCase","url","includes","JSON","stringify","data","token","localStorage","getItem","Authorization","error","Promise","reject","response","_response$config$meth","status","message","removeItem","window","location","href"],"sources":["/Users/seohun/Documents/LMS (1)/src/frontend/src/api/apiClient.ts"],"sourcesContent":["import axios from 'axios';\n\n// Backend URL (설정이 다른 환경에 따라 다름)\nconst API_BASE_URL = process.env.NODE_ENV === 'production' \n  ? 'https://api.ai-lms.example.com' // 프로덕션 URL (실제 배포시 변경 필요)\n  : 'http://localhost:8000';         // 개발 환경 URL\n\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add a request interceptor to include the auth token in requests if available\napiClient.interceptors.request.use(\n  (config) => {\n    // 개발 모드 로그\n    if (process.env.NODE_ENV === 'development') {\n      console.log(`API Request: ${config.method?.toUpperCase()} ${config.url}`, \n        config.url?.includes('login') ? '로그인 요청 데이터: ' + JSON.stringify(config.data) : '');\n    }\n    \n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\n// Add a response interceptor to handle common error scenarios\napiClient.interceptors.response.use(\n  (response) => {\n    // 개발 모드 로그\n    if (process.env.NODE_ENV === 'development') {\n      console.log(`API Response: ${response.config.method?.toUpperCase()} ${response.config.url}`, response.status);\n    }\n    return response;\n  },\n  (error) => {\n    // 개발 모드에서는 모든 네트워크 오류를 로그\n    if (process.env.NODE_ENV === 'development') {\n      if (error.response) {\n        // 서버에서 응답이 왔지만 오류 상태 코드\n        console.log('API Error Response:', {\n          status: error.response.status,\n          data: error.response.data,\n          url: error.config.url,\n          method: error.config.method\n        });\n      } else if (error.request) {\n        // 요청은 보냈지만 응답을 받지 못함 (네트워크 오류 등)\n        console.log('API Network Error:', {\n          url: error.config.url, \n          method: error.config.method\n        });\n      } else {\n        // 요청 설정 중 오류 발생\n        console.log('API Config Error:', error.message);\n      }\n    }\n    \n    // 401 Unauthorized 처리\n    if (error.response && error.response.status === 401) {\n      // 토큰이 만료되었거나 유효하지 않음\n      if (error.config.url !== '/api/auth/login/') {\n        // 로그인 엔드포인트가 아닌 경우에만 로그아웃 처리\n        localStorage.removeItem('token');\n        window.location.href = '/login';\n      }\n    }\n    \n    return Promise.reject(error);\n  }\n);\n\nexport default apiClient;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}