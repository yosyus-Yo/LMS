{"ast":null,"code":"import React from'react';import{Navigate}from'react-router-dom';// 인증 관련\nimport Login from'./features/auth/Login';import Register from'./features/auth/Register';// 대시보드\nimport Dashboard from'./features/dashboard/Dashboard';// 강의 관련\nimport CourseList from'./features/courses/CourseList';import CourseDetail from'./features/courses/CourseDetail';// 임시 컴포넌트 (추후 실제 구현으로 대체)\nimport{jsx as _jsx,Fragment as _Fragment}from\"react/jsx-runtime\";const Profile=()=>/*#__PURE__*/_jsx(\"div\",{children:\"Profile Page\"});const AdminDashboard=()=>/*#__PURE__*/_jsx(\"div\",{children:\"Admin Dashboard Page\"});const InstructorCourses=()=>/*#__PURE__*/_jsx(\"div\",{children:\"Instructor Courses Page\"});const NotFound=()=>/*#__PURE__*/_jsx(\"div\",{children:\"404 - Page Not Found\"});// 인증 보호 라우트 헬퍼 함수\nconst ProtectedRoute=_ref=>{let{element,isAuthenticated,redirectPath='/login',requiredRole,userRole}=_ref;// 인증되지 않은 경우\nif(!isAuthenticated){return/*#__PURE__*/_jsx(Navigate,{to:redirectPath,replace:true});}// 역할 확인이 필요한 경우\nif(requiredRole&&userRole!==requiredRole){return/*#__PURE__*/_jsx(Navigate,{to:\"/dashboard\",replace:true});}return/*#__PURE__*/_jsx(_Fragment,{children:element});};// 라우트 설정 함수\nexport const createRoutes=(isAuthenticated,userRole)=>{return[// 공개 라우트\n{path:'/login',element:isAuthenticated?/*#__PURE__*/_jsx(Navigate,{to:\"/dashboard\",replace:true}):/*#__PURE__*/_jsx(Login,{})},{path:'/register',element:isAuthenticated?/*#__PURE__*/_jsx(Navigate,{to:\"/dashboard\",replace:true}):/*#__PURE__*/_jsx(Register,{})},// 보호된 라우트\n{path:'/dashboard',element:/*#__PURE__*/_jsx(ProtectedRoute,{element:/*#__PURE__*/_jsx(Dashboard,{}),isAuthenticated:isAuthenticated})},{path:'/courses',element:/*#__PURE__*/_jsx(ProtectedRoute,{element:/*#__PURE__*/_jsx(CourseList,{}),isAuthenticated:isAuthenticated})},{path:'/courses/:courseId',element:/*#__PURE__*/_jsx(ProtectedRoute,{element:/*#__PURE__*/_jsx(CourseDetail,{}),isAuthenticated:isAuthenticated})},{path:'/profile',element:/*#__PURE__*/_jsx(ProtectedRoute,{element:/*#__PURE__*/_jsx(Profile,{}),isAuthenticated:isAuthenticated})},// 강사 전용 라우트\n{path:'/my-courses',element:/*#__PURE__*/_jsx(ProtectedRoute,{element:/*#__PURE__*/_jsx(InstructorCourses,{}),isAuthenticated:isAuthenticated,requiredRole:\"instructor\",userRole:userRole})},// 관리자 전용 라우트\n{path:'/admin',element:/*#__PURE__*/_jsx(ProtectedRoute,{element:/*#__PURE__*/_jsx(AdminDashboard,{}),isAuthenticated:isAuthenticated,requiredRole:\"admin\",userRole:userRole})},// 리디렉션\n{path:'/',element:/*#__PURE__*/_jsx(Navigate,{to:isAuthenticated?'/dashboard':'/login',replace:true})},// 찾을 수 없는 페이지\n{path:'*',element:/*#__PURE__*/_jsx(NotFound,{})}];};export default createRoutes;","map":{"version":3,"names":["React","Navigate","Login","Register","Dashboard","CourseList","CourseDetail","jsx","_jsx","Fragment","_Fragment","Profile","children","AdminDashboard","InstructorCourses","NotFound","ProtectedRoute","_ref","element","isAuthenticated","redirectPath","requiredRole","userRole","to","replace","createRoutes","path"],"sources":["/Users/seohun/Documents/LMS (1)/src/frontend/src/routes.tsx"],"sourcesContent":["import React from 'react';\nimport { Navigate, RouteObject } from 'react-router-dom';\n\n// 인증 관련\nimport Login from './features/auth/Login';\nimport Register from './features/auth/Register';\n\n// 대시보드\nimport Dashboard from './features/dashboard/Dashboard';\n\n// 강의 관련\nimport CourseList from './features/courses/CourseList';\nimport CourseDetail from './features/courses/CourseDetail';\n\n// 임시 컴포넌트 (추후 실제 구현으로 대체)\nconst Profile = () => <div>Profile Page</div>;\nconst AdminDashboard = () => <div>Admin Dashboard Page</div>;\nconst InstructorCourses = () => <div>Instructor Courses Page</div>;\nconst NotFound = () => <div>404 - Page Not Found</div>;\n\n// 인증 보호 라우트 헬퍼 함수\ninterface ProtectedRouteProps {\n  element: React.ReactNode;\n  isAuthenticated: boolean;\n  redirectPath?: string;\n  requiredRole?: string;\n  userRole?: string;\n}\n\nconst ProtectedRoute = ({\n  element,\n  isAuthenticated,\n  redirectPath = '/login',\n  requiredRole,\n  userRole,\n}: ProtectedRouteProps) => {\n  // 인증되지 않은 경우\n  if (!isAuthenticated) {\n    return <Navigate to={redirectPath} replace />;\n  }\n\n  // 역할 확인이 필요한 경우\n  if (requiredRole && userRole !== requiredRole) {\n    return <Navigate to=\"/dashboard\" replace />;\n  }\n\n  return <>{element}</>;\n};\n\n// 라우트 설정 함수\nexport const createRoutes = (isAuthenticated: boolean, userRole: string): RouteObject[] => {\n  return [\n    // 공개 라우트\n    {\n      path: '/login',\n      element: isAuthenticated ? <Navigate to=\"/dashboard\" replace /> : <Login />,\n    },\n    {\n      path: '/register',\n      element: isAuthenticated ? <Navigate to=\"/dashboard\" replace /> : <Register />,\n    },\n\n    // 보호된 라우트\n    {\n      path: '/dashboard',\n      element: (\n        <ProtectedRoute\n          element={<Dashboard />}\n          isAuthenticated={isAuthenticated}\n        />\n      ),\n    },\n    {\n      path: '/courses',\n      element: (\n        <ProtectedRoute\n          element={<CourseList />}\n          isAuthenticated={isAuthenticated}\n        />\n      ),\n    },\n    {\n      path: '/courses/:courseId',\n      element: (\n        <ProtectedRoute\n          element={<CourseDetail />}\n          isAuthenticated={isAuthenticated}\n        />\n      ),\n    },\n    {\n      path: '/profile',\n      element: (\n        <ProtectedRoute\n          element={<Profile />}\n          isAuthenticated={isAuthenticated}\n        />\n      ),\n    },\n\n    // 강사 전용 라우트\n    {\n      path: '/my-courses',\n      element: (\n        <ProtectedRoute\n          element={<InstructorCourses />}\n          isAuthenticated={isAuthenticated}\n          requiredRole=\"instructor\"\n          userRole={userRole}\n        />\n      ),\n    },\n\n    // 관리자 전용 라우트\n    {\n      path: '/admin',\n      element: (\n        <ProtectedRoute\n          element={<AdminDashboard />}\n          isAuthenticated={isAuthenticated}\n          requiredRole=\"admin\"\n          userRole={userRole}\n        />\n      ),\n    },\n\n    // 리디렉션\n    {\n      path: '/',\n      element: <Navigate to={isAuthenticated ? '/dashboard' : '/login'} replace />,\n    },\n\n    // 찾을 수 없는 페이지\n    {\n      path: '*',\n      element: <NotFound />,\n    },\n  ];\n};\n\nexport default createRoutes;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}