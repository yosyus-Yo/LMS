{"ast":null,"code":"import{createSlice,createAsyncThunk}from'@reduxjs/toolkit';import apiClient from'../../api/apiClient';// 타입 정의\n// 초기 상태\nconst initialState={token:localStorage.getItem('token'),user:null,isAuthenticated:localStorage.getItem('token')?true:false,isLoading:false,error:null};// 로그인 비동기 액션\nexport const login=createAsyncThunk('auth/login',async(credentials,_ref)=>{let{rejectWithValue}=_ref;try{// 백엔드 API 엔드포인트로 요청\nconst response=await apiClient.post('/api/auth/login/',credentials);// 로컬 스토리지에 토큰 저장\nlocalStorage.setItem('token',response.data.access);return response.data;}catch(error){console.error('Login error:',error);if(error.response){var _error$response$data,_error$response$data2;// 서버 응답 오류 처리\nreturn rejectWithValue(((_error$response$data=error.response.data)===null||_error$response$data===void 0?void 0:_error$response$data.detail)||((_error$response$data2=error.response.data)===null||_error$response$data2===void 0?void 0:_error$response$data2.message)||'Login failed');}return rejectWithValue('Network error occurred. Please check your connection and try again.');}});// 회원가입 비동기 액션\nexport const register=createAsyncThunk('auth/register',async(credentials,_ref2)=>{let{rejectWithValue}=_ref2;try{// 실제 백엔드 API 요청\nconst response=await apiClient.post('/api/auth/register/',credentials);return response.data;}catch(error){console.error('Registration error:',error);if(error.response){var _error$response$data3,_error$response$data4;const errorMessage=((_error$response$data3=error.response.data)===null||_error$response$data3===void 0?void 0:_error$response$data3.detail)||((_error$response$data4=error.response.data)===null||_error$response$data4===void 0?void 0:_error$response$data4.message)||(typeof error.response.data==='string'?error.response.data:'Registration failed');return rejectWithValue(errorMessage);}return rejectWithValue('Network error occurred. Please check your connection and try again.');}});// 사용자 정보 가져오기 액션\nexport const getUserProfile=createAsyncThunk('auth/getUserProfile',async(_,_ref3)=>{let{getState,rejectWithValue}=_ref3;try{const{auth}=getState();if(!auth.token){return rejectWithValue('No authentication token');}// 실제 백엔드 API 요청\nconst response=await apiClient.get('/api/auth/profile/');// 토큰은 apiClient의 인터셉터에서 자동으로 추가됨\nreturn response.data;}catch(error){console.error('Profile fetch error:',error);if(error.response){var _error$response$data5,_error$response$data6;const errorMessage=((_error$response$data5=error.response.data)===null||_error$response$data5===void 0?void 0:_error$response$data5.detail)||((_error$response$data6=error.response.data)===null||_error$response$data6===void 0?void 0:_error$response$data6.message)||'Failed to fetch user profile';return rejectWithValue(errorMessage);}return rejectWithValue('Network error occurred. Please check your connection and try again.');}});// Auth 슬라이스\nconst authSlice=createSlice({name:'auth',initialState,reducers:{logout:state=>{localStorage.removeItem('token');state.token=null;state.user=null;state.isAuthenticated=false;state.error=null;},clearError:state=>{state.error=null;}},extraReducers:builder=>{// 로그인 액션 처리\nbuilder.addCase(login.pending,state=>{state.isLoading=true;state.error=null;}).addCase(login.fulfilled,(state,action)=>{state.isLoading=false;state.isAuthenticated=true;state.token=action.payload.access;state.user=action.payload.user;}).addCase(login.rejected,(state,action)=>{state.isLoading=false;state.error=action.payload;});// 회원가입 액션 처리\nbuilder.addCase(register.pending,state=>{state.isLoading=true;state.error=null;}).addCase(register.fulfilled,state=>{state.isLoading=false;}).addCase(register.rejected,(state,action)=>{state.isLoading=false;state.error=action.payload;});// 사용자 정보 가져오기 액션 처리\nbuilder.addCase(getUserProfile.pending,state=>{state.isLoading=true;state.error=null;}).addCase(getUserProfile.fulfilled,(state,action)=>{state.isLoading=false;state.user=action.payload;}).addCase(getUserProfile.rejected,(state,action)=>{state.isLoading=false;state.error=action.payload;// 토큰이 만료된 경우 로그아웃 처리\nif(action.payload==='Token is invalid or expired'){state.token=null;state.user=null;state.isAuthenticated=false;localStorage.removeItem('token');}});}});export const{logout,clearError}=authSlice.actions;export default authSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","apiClient","initialState","token","localStorage","getItem","user","isAuthenticated","isLoading","error","login","credentials","_ref","rejectWithValue","response","post","setItem","data","access","console","_error$response$data","_error$response$data2","detail","message","register","_ref2","_error$response$data3","_error$response$data4","errorMessage","getUserProfile","_","_ref3","getState","auth","get","_error$response$data5","_error$response$data6","authSlice","name","reducers","logout","state","removeItem","clearError","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","actions","reducer"],"sources":["/Users/seohun/Documents/LMS (1)/src/frontend/src/features/auth/authSlice.ts"],"sourcesContent":["import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit';\nimport apiClient from '../../api/apiClient';\nimport { jwtDecode } from 'jwt-decode';\n\n// 타입 정의\ninterface User {\n  id: number;\n  username: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n  role: 'student' | 'instructor' | 'admin';\n}\n\ninterface AuthState {\n  token: string | null;\n  user: User | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  error: string | null;\n}\n\ninterface LoginCredentials {\n  email: string;\n  password: string;\n}\n\ninterface RegisterCredentials {\n  username: string;\n  email: string;\n  password: string;\n  password_confirm: string;\n  first_name: string;\n  last_name: string;\n}\n\ninterface LoginResponse {\n  access: string;\n  refresh: string;\n  user: User;\n}\n\n// 초기 상태\nconst initialState: AuthState = {\n  token: localStorage.getItem('token'),\n  user: null,\n  isAuthenticated: localStorage.getItem('token') ? true : false,\n  isLoading: false,\n  error: null,\n};\n\n// 로그인 비동기 액션\nexport const login = createAsyncThunk(\n  'auth/login',\n  async (credentials: LoginCredentials, { rejectWithValue }) => {\n    try {\n      // 백엔드 API 엔드포인트로 요청\n      const response = await apiClient.post<LoginResponse>(\n        '/api/auth/login/',\n        credentials\n      );\n      \n      // 로컬 스토리지에 토큰 저장\n      localStorage.setItem('token', response.data.access);\n      \n      return response.data;\n    } catch (error: any) {\n      console.error('Login error:', error);\n      \n      if (error.response) {\n        // 서버 응답 오류 처리\n        return rejectWithValue(error.response.data?.detail || error.response.data?.message || 'Login failed');\n      }\n      return rejectWithValue('Network error occurred. Please check your connection and try again.');\n    }\n  }\n);\n\n// 회원가입 비동기 액션\nexport const register = createAsyncThunk(\n  'auth/register',\n  async (credentials: RegisterCredentials, { rejectWithValue }) => {\n    try {\n      // 실제 백엔드 API 요청\n      const response = await apiClient.post<User>(\n        '/api/auth/register/',\n        credentials\n      );\n      return response.data;\n    } catch (error: any) {\n      console.error('Registration error:', error);\n      \n      if (error.response) {\n        const errorMessage = \n          error.response.data?.detail || \n          error.response.data?.message || \n          (typeof error.response.data === 'string' ? error.response.data : 'Registration failed');\n        return rejectWithValue(errorMessage);\n      }\n      \n      return rejectWithValue('Network error occurred. Please check your connection and try again.');\n    }\n  }\n);\n\n// 사용자 정보 가져오기 액션\nexport const getUserProfile = createAsyncThunk(\n  'auth/getUserProfile',\n  async (_, { getState, rejectWithValue }) => {\n    try {\n      const { auth } = getState() as { auth: AuthState };\n      \n      if (!auth.token) {\n        return rejectWithValue('No authentication token');\n      }\n      \n      // 실제 백엔드 API 요청\n      const response = await apiClient.get<User>('/api/auth/profile/');\n      // 토큰은 apiClient의 인터셉터에서 자동으로 추가됨\n      \n      return response.data;\n    } catch (error: any) {\n      console.error('Profile fetch error:', error);\n      \n      if (error.response) {\n        const errorMessage = \n          error.response.data?.detail || \n          error.response.data?.message || \n          'Failed to fetch user profile';\n        return rejectWithValue(errorMessage);\n      }\n      return rejectWithValue('Network error occurred. Please check your connection and try again.');\n    }\n  }\n);\n\n// Auth 슬라이스\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    logout: (state) => {\n      localStorage.removeItem('token');\n      state.token = null;\n      state.user = null;\n      state.isAuthenticated = false;\n      state.error = null;\n    },\n    clearError: (state) => {\n      state.error = null;\n    },\n  },\n  extraReducers: (builder) => {\n    // 로그인 액션 처리\n    builder\n      .addCase(login.pending, (state) => {\n        state.isLoading = true;\n        state.error = null;\n      })\n      .addCase(login.fulfilled, (state, action: PayloadAction<LoginResponse>) => {\n        state.isLoading = false;\n        state.isAuthenticated = true;\n        state.token = action.payload.access;\n        state.user = action.payload.user;\n      })\n      .addCase(login.rejected, (state, action) => {\n        state.isLoading = false;\n        state.error = action.payload as string;\n      });\n    \n    // 회원가입 액션 처리\n    builder\n      .addCase(register.pending, (state) => {\n        state.isLoading = true;\n        state.error = null;\n      })\n      .addCase(register.fulfilled, (state) => {\n        state.isLoading = false;\n      })\n      .addCase(register.rejected, (state, action) => {\n        state.isLoading = false;\n        state.error = action.payload as string;\n      });\n    \n    // 사용자 정보 가져오기 액션 처리\n    builder\n      .addCase(getUserProfile.pending, (state) => {\n        state.isLoading = true;\n        state.error = null;\n      })\n      .addCase(getUserProfile.fulfilled, (state, action: PayloadAction<User>) => {\n        state.isLoading = false;\n        state.user = action.payload;\n      })\n      .addCase(getUserProfile.rejected, (state, action) => {\n        state.isLoading = false;\n        state.error = action.payload as string;\n        // 토큰이 만료된 경우 로그아웃 처리\n        if (action.payload === 'Token is invalid or expired') {\n          state.token = null;\n          state.user = null;\n          state.isAuthenticated = false;\n          localStorage.removeItem('token');\n        }\n      });\n  },\n});\n\nexport const { logout, clearError } = authSlice.actions;\nexport default authSlice.reducer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}