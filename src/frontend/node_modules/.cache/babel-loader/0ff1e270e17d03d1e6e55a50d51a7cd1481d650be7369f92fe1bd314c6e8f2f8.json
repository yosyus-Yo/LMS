{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\n// 타입 정의\n\n// 초기 상태\nconst initialState = {\n  token: localStorage.getItem('token'),\n  user: null,\n  isAuthenticated: localStorage.getItem('token') ? true : false,\n  isLoading: false,\n  error: null\n};\n\n// 로그인 비동기 액션\nexport const login = createAsyncThunk('auth/login', async (credentials, {\n  rejectWithValue\n}) => {\n  try {\n    // API 엔드포인트는 실제 백엔드 URL로 변경 필요\n    const response = await axios.post('/api/auth/login/', credentials);\n\n    // 로컬 스토리지에 토큰 저장\n    localStorage.setItem('token', response.data.access);\n    return response.data;\n  } catch (error) {\n    if (axios.isAxiosError(error) && error.response) {\n      return rejectWithValue(error.response.data.detail || 'Login failed');\n    }\n    return rejectWithValue('Network error occurred');\n  }\n});\n\n// 회원가입 비동기 액션\nexport const register = createAsyncThunk('auth/register', async (credentials, {\n  rejectWithValue\n}) => {\n  try {\n    // API 엔드포인트는 실제 백엔드 URL로 변경 필요\n    const response = await axios.post('/api/auth/register/', credentials);\n    return response.data;\n  } catch (error) {\n    if (axios.isAxiosError(error) && error.response) {\n      return rejectWithValue(error.response.data.detail || 'Registration failed');\n    }\n    return rejectWithValue('Network error occurred');\n  }\n});\n\n// 사용자 정보 가져오기 액션\nexport const getUserProfile = createAsyncThunk('auth/getUserProfile', async (_, {\n  getState,\n  rejectWithValue\n}) => {\n  try {\n    const {\n      auth\n    } = getState();\n    if (!auth.token) {\n      return rejectWithValue('No authentication token');\n    }\n\n    // API 엔드포인트는 실제 백엔드 URL로 변경 필요\n    const response = await axios.get('/api/auth/profile/', {\n      headers: {\n        Authorization: `Bearer ${auth.token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    if (axios.isAxiosError(error) && error.response) {\n      return rejectWithValue(error.response.data.detail || 'Failed to fetch user profile');\n    }\n    return rejectWithValue('Network error occurred');\n  }\n});\n\n// Auth 슬라이스\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    logout: state => {\n      localStorage.removeItem('token');\n      state.token = null;\n      state.user = null;\n      state.isAuthenticated = false;\n      state.error = null;\n    },\n    clearError: state => {\n      state.error = null;\n    }\n  },\n  extraReducers: builder => {\n    // 로그인 액션 처리\n    builder.addCase(login.pending, state => {\n      state.isLoading = true;\n      state.error = null;\n    }).addCase(login.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.isAuthenticated = true;\n      state.token = action.payload.access;\n      state.user = action.payload.user;\n    }).addCase(login.rejected, (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    });\n\n    // 회원가입 액션 처리\n    builder.addCase(register.pending, state => {\n      state.isLoading = true;\n      state.error = null;\n    }).addCase(register.fulfilled, state => {\n      state.isLoading = false;\n    }).addCase(register.rejected, (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    });\n\n    // 사용자 정보 가져오기 액션 처리\n    builder.addCase(getUserProfile.pending, state => {\n      state.isLoading = true;\n      state.error = null;\n    }).addCase(getUserProfile.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.user = action.payload;\n    }).addCase(getUserProfile.rejected, (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n      // 토큰이 만료된 경우 로그아웃 처리\n      if (action.payload === 'Token is invalid or expired') {\n        state.token = null;\n        state.user = null;\n        state.isAuthenticated = false;\n        localStorage.removeItem('token');\n      }\n    });\n  }\n});\nexport const {\n  logout,\n  clearError\n} = authSlice.actions;\nexport default authSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","initialState","token","localStorage","getItem","user","isAuthenticated","isLoading","error","login","credentials","rejectWithValue","response","post","setItem","data","access","isAxiosError","detail","register","getUserProfile","_","getState","auth","get","headers","Authorization","authSlice","name","reducers","logout","state","removeItem","clearError","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","actions","reducer"],"sources":["/home/cafe99/my_first_work/projects/LMS/src/frontend/src/features/auth/authSlice.ts"],"sourcesContent":["import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport { jwtDecode } from 'jwt-decode';\n\n// 타입 정의\ninterface User {\n  id: number;\n  username: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n  role: 'student' | 'instructor' | 'admin';\n}\n\ninterface AuthState {\n  token: string | null;\n  user: User | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  error: string | null;\n}\n\ninterface LoginCredentials {\n  username: string;\n  password: string;\n}\n\ninterface RegisterCredentials {\n  username: string;\n  email: string;\n  password: string;\n  firstName: string;\n  lastName: string;\n}\n\ninterface LoginResponse {\n  access: string;\n  refresh: string;\n  user: User;\n}\n\n// 초기 상태\nconst initialState: AuthState = {\n  token: localStorage.getItem('token'),\n  user: null,\n  isAuthenticated: localStorage.getItem('token') ? true : false,\n  isLoading: false,\n  error: null,\n};\n\n// 로그인 비동기 액션\nexport const login = createAsyncThunk(\n  'auth/login',\n  async (credentials: LoginCredentials, { rejectWithValue }) => {\n    try {\n      // API 엔드포인트는 실제 백엔드 URL로 변경 필요\n      const response = await axios.post<LoginResponse>(\n        '/api/auth/login/',\n        credentials\n      );\n      \n      // 로컬 스토리지에 토큰 저장\n      localStorage.setItem('token', response.data.access);\n      \n      return response.data;\n    } catch (error) {\n      if (axios.isAxiosError(error) && error.response) {\n        return rejectWithValue(error.response.data.detail || 'Login failed');\n      }\n      return rejectWithValue('Network error occurred');\n    }\n  }\n);\n\n// 회원가입 비동기 액션\nexport const register = createAsyncThunk(\n  'auth/register',\n  async (credentials: RegisterCredentials, { rejectWithValue }) => {\n    try {\n      // API 엔드포인트는 실제 백엔드 URL로 변경 필요\n      const response = await axios.post<User>(\n        '/api/auth/register/',\n        credentials\n      );\n      return response.data;\n    } catch (error) {\n      if (axios.isAxiosError(error) && error.response) {\n        return rejectWithValue(error.response.data.detail || 'Registration failed');\n      }\n      return rejectWithValue('Network error occurred');\n    }\n  }\n);\n\n// 사용자 정보 가져오기 액션\nexport const getUserProfile = createAsyncThunk(\n  'auth/getUserProfile',\n  async (_, { getState, rejectWithValue }) => {\n    try {\n      const { auth } = getState() as { auth: AuthState };\n      \n      if (!auth.token) {\n        return rejectWithValue('No authentication token');\n      }\n      \n      // API 엔드포인트는 실제 백엔드 URL로 변경 필요\n      const response = await axios.get<User>('/api/auth/profile/', {\n        headers: {\n          Authorization: `Bearer ${auth.token}`,\n        },\n      });\n      \n      return response.data;\n    } catch (error) {\n      if (axios.isAxiosError(error) && error.response) {\n        return rejectWithValue(error.response.data.detail || 'Failed to fetch user profile');\n      }\n      return rejectWithValue('Network error occurred');\n    }\n  }\n);\n\n// Auth 슬라이스\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    logout: (state) => {\n      localStorage.removeItem('token');\n      state.token = null;\n      state.user = null;\n      state.isAuthenticated = false;\n      state.error = null;\n    },\n    clearError: (state) => {\n      state.error = null;\n    },\n  },\n  extraReducers: (builder) => {\n    // 로그인 액션 처리\n    builder\n      .addCase(login.pending, (state) => {\n        state.isLoading = true;\n        state.error = null;\n      })\n      .addCase(login.fulfilled, (state, action: PayloadAction<LoginResponse>) => {\n        state.isLoading = false;\n        state.isAuthenticated = true;\n        state.token = action.payload.access;\n        state.user = action.payload.user;\n      })\n      .addCase(login.rejected, (state, action) => {\n        state.isLoading = false;\n        state.error = action.payload as string;\n      });\n    \n    // 회원가입 액션 처리\n    builder\n      .addCase(register.pending, (state) => {\n        state.isLoading = true;\n        state.error = null;\n      })\n      .addCase(register.fulfilled, (state) => {\n        state.isLoading = false;\n      })\n      .addCase(register.rejected, (state, action) => {\n        state.isLoading = false;\n        state.error = action.payload as string;\n      });\n    \n    // 사용자 정보 가져오기 액션 처리\n    builder\n      .addCase(getUserProfile.pending, (state) => {\n        state.isLoading = true;\n        state.error = null;\n      })\n      .addCase(getUserProfile.fulfilled, (state, action: PayloadAction<User>) => {\n        state.isLoading = false;\n        state.user = action.payload;\n      })\n      .addCase(getUserProfile.rejected, (state, action) => {\n        state.isLoading = false;\n        state.error = action.payload as string;\n        // 토큰이 만료된 경우 로그아웃 처리\n        if (action.payload === 'Token is invalid or expired') {\n          state.token = null;\n          state.user = null;\n          state.isAuthenticated = false;\n          localStorage.removeItem('token');\n        }\n      });\n  },\n});\n\nexport const { logout, clearError } = authSlice.actions;\nexport default authSlice.reducer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}